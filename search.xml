<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AdminLTE的基本使用</title>
      <link href="/2019/06/10/adminlte-de-ji-ben-shi-yong/"/>
      <url>/2019/06/10/adminlte-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="AdminLTE-基本使用"><a href="#AdminLTE-基本使用" class="headerlink" title="AdminLTE 基本使用"></a>AdminLTE 基本使用</h2><h3 id="1-AdminLTE简介"><a href="#1-AdminLTE简介" class="headerlink" title="1.AdminLTE简介"></a>1.AdminLTE简介</h3><p>AdminLTE是一款建立在bootstrap和jquery之上的开源的模板主题工具。<br><img src="https://camo.githubusercontent.com/e3bbc646d6ff473da2dd6cede2c968846a6982a6/68747470733a2f2f61646d696e6c74652e696f2f41646d696e4c5445322e706e67" alt="image"></p><h3 id="2-AdminLTE下载"><a href="#2-AdminLTE下载" class="headerlink" title="2.AdminLTE下载"></a>2.AdminLTE下载</h3><p>英文版下载地址：<a href="https://github.com/almasaeed2010/AdminLTE" target="_blank" rel="noopener">https://github.com/almasaeed2010/AdminLTE</a><br>中文版下载地址：<a href="https://github.com/itheima2017/adminlte2-itheima" target="_blank" rel="noopener">https://github.com/itheima2017/adminlte2-itheima</a></p><h3 id="3-AdminLTE结构介绍"><a href="#3-AdminLTE结构介绍" class="headerlink" title="3.AdminLTE结构介绍"></a>3.AdminLTE结构介绍</h3><p>AdminLTE依赖于两个框架Bootstrap3与JQuery1.11   </p><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE03.png" alt><br>在目录结构中assets、modules、pages、 plugins都是前端开发时所使用到的，最终发布的就是release。所以对于我们使用中文版来说，我们只需要关注release目录下的结构就可以。    </p><h3 id="4-布局皮肤"><a href="#4-布局皮肤" class="headerlink" title="4.布局皮肤"></a>4.布局皮肤</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE02.png" alt></p><h4 id="4-1布局"><a href="#4-1布局" class="headerlink" title="4.1布局"></a>4.1布局</h4><p>.wrapper包住了body下的所有代码<br>.main-header里是网站的logo和导航栏的代码<br>.main-sidebar里是用户面板和侧边栏菜单的代码<br>.content-wrapper里是页面的页面和内容区域的代码 .main-footer里是页脚的代码<br>.control-sidebar里是页面右侧侧边栏区域的代码<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE06.png" alt></p><h4 id="4-2布局选项"><a href="#4-2布局选项" class="headerlink" title="4.2布局选项"></a>4.2布局选项</h4><p>fixed：固定<br>layout-boxed：盒子布局<br>ayout-top-nav：顶部隐藏<br>sidebar-collapse：侧边栏隐藏<br>sidebar-mini：侧边栏隐藏时有小图标      </p><h4 id="4-3皮肤"><a href="#4-3皮肤" class="headerlink" title="4.3皮肤"></a>4.3皮肤</h4><p>skin-blue：蓝色<br>skin-black：黑色<br>skin-purple：紫色<br>skin-yellow：黄色<br>skin-red：红色<br>skin-green：绿色<br>以上项我们可以查看start.html页面中查看。    </p><hr><h2 id="在SSM中的使用"><a href="#在SSM中的使用" class="headerlink" title="在SSM中的使用"></a>在SSM中的使用</h2><h3 id="1-导入到HBuilder"><a href="#1-导入到HBuilder" class="headerlink" title="1.导入到HBuilder"></a>1.导入到HBuilder</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE01.png" alt></p><h3 id="2-在page目录下选择需要的页面"><a href="#2-在page目录下选择需要的页面" class="headerlink" title="2.在page目录下选择需要的页面"></a>2.在page目录下选择需要的页面</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE04.png" alt></p><h3 id="3-对页面进行个性化修改"><a href="#3-对页面进行个性化修改" class="headerlink" title="3.对页面进行个性化修改"></a>3.对页面进行个性化修改</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/AdminLTE05.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 主题模版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AdminLTE </tag>
            
            <tag> bootstrap </tag>
            
            <tag> 主题模版 </tag>
            
            <tag> 后台模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN入门</title>
      <link href="/2019/06/09/svn-ru-men/"/>
      <url>/2019/06/09/svn-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SVN介绍"><a href="#1-SVN介绍" class="headerlink" title="1.SVN介绍"></a>1.SVN介绍</h2><p>SVN是Subversion的简称，是一个自由开源的版本控制系统。<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN38.png" alt></p><h4 id="1-1操作解释"><a href="#1-1操作解释" class="headerlink" title="1.1操作解释"></a>1.1操作解释</h4><p>checkout：把整个项目代码下载到本地<br>update：将本地的源码更新至服务器的最新版本<br>commit：将本地源码更新内容提交到服务器  </p><h4 id="1-2避免干扰"><a href="#1-2避免干扰" class="headerlink" title="1.2避免干扰"></a>1.2避免干扰</h4><h5 id="1-2-1复制-修改-合并方案-Subversion默认的模式"><a href="#1-2-1复制-修改-合并方案-Subversion默认的模式" class="headerlink" title="1.2.1复制-修改-合并方案(Subversion默认的模式)"></a>1.2.1复制-修改-合并方案(Subversion默认的模式)</h5><p>每一个用户读取库在本地建立私人副本，在本地工作修改，最终合并成为最终版本，需要人工去整合判断正误。</p><h5 id="1-2-2锁定-修改-解锁方案"><a href="#1-2-2锁定-修改-解锁方案" class="headerlink" title="1.2.2锁定-修改-解锁方案"></a>1.2.2锁定-修改-解锁方案</h5><p>在这样的模型里，在一个时间段里配置库的一个文件只允许被一个人修改。 此模式不适合软件开发这种工作。 </p><h4 id="1-3安装位置"><a href="#1-3安装位置" class="headerlink" title="1.3安装位置"></a>1.3安装位置</h4><p>Subversion支持Linux和Windows，更多是安装在Linux下。         </p><h4 id="1-4运行方式"><a href="#1-4运行方式" class="headerlink" title="1.4运行方式"></a>1.4运行方式</h4><p>独立服务器和借助apache运行。</p><h4 id="1-5存储方式"><a href="#1-5存储方式" class="headerlink" title="1.5存储方式"></a>1.5存储方式</h4><p>BDB与FSFS<br>BDB一种事务安全型表类型和FSFS一种不需要数据库的存储系统。<br>因为BDB方式在服务器中断时，有可能锁住数据，所以还是FSFS方式更安全一点。</p><h2 id="2-SVN使用"><a href="#2-SVN使用" class="headerlink" title="2 SVN使用"></a>2 SVN使用</h2><p>window下svn服务器VisualSVN<br>客户端工具TortoiseSVN<br>idea svn插件</p><h3 id="2-1-服务器端VisualSVN安装与配置"><a href="#2-1-服务器端VisualSVN安装与配置" class="headerlink" title="2.1 服务器端VisualSVN安装与配置"></a>2.1 服务器端VisualSVN安装与配置</h3><h4 id="2-1-1官网下载visualSVN"><a href="#2-1-1官网下载visualSVN" class="headerlink" title="2.1.1官网下载visualSVN"></a>2.1.1官网下载visualSVN</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN01.png" alt></p><h4 id="2-1-2安装visualSVN"><a href="#2-1-2安装visualSVN" class="headerlink" title="2.1.2安装visualSVN"></a>2.1.2安装visualSVN</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN02.png" alt><br>location：安装位置<br>Repositories：仓库位置<br>存储方式使用FSFS<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN03.png" alt></p><h4 id="2-1-3visualSVN使用"><a href="#2-1-3visualSVN使用" class="headerlink" title="2.1.3visualSVN使用"></a>2.1.3visualSVN使用</h4><p>创建组 创建用户<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN04.png" alt><br>分配权限 创建仓库 复制仓库的URL输入浏览器中成功访问<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN05.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN06.png" alt></p><h3 id="2-2-客户端TortoiseSVN安装与配置"><a href="#2-2-客户端TortoiseSVN安装与配置" class="headerlink" title="2.2 客户端TortoiseSVN安装与配置"></a>2.2 客户端TortoiseSVN安装与配置</h3><p>TortoiseSVN是一个基于windows系统的svn客户端图形化界面</p><h4 id="2-2-1-TortoiseSVN的下载与安装"><a href="#2-2-1-TortoiseSVN的下载与安装" class="headerlink" title="2.2.1 TortoiseSVN的下载与安装"></a>2.2.1 TortoiseSVN的下载与安装</h4><p><a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">https://tortoisesvn.net/downloads.html</a> 官网下载<br>安装注意 选择第二个选项 要不然没有svn.exe文件<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN39.png" alt>    </p><h4 id="2-2-2-TortoiseSVN的使用"><a href="#2-2-2-TortoiseSVN的使用" class="headerlink" title="2.2.2 TortoiseSVN的使用"></a>2.2.2 TortoiseSVN的使用</h4><p>新建文件夹 右键就会看到tortoiseSVN 点击Repo-browser浏览仓库<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN07.png" alt><br>输入认证信息赋予文件夹权限<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN08.png" alt><br>右键setting 清理认证信息<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN09.png" alt></p><h4 id="2-2-3-TortoiseSVN的操作"><a href="#2-2-3-TortoiseSVN的操作" class="headerlink" title="2.2.3 TortoiseSVN的操作"></a>2.2.3 TortoiseSVN的操作</h4><p>通过checkout从仓库下载文件<br>新建文件 右键add 然后commit message内填写修改信息</p><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN10.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN11.png" alt>       </p><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN12.png" alt><br>update 更新服务器<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN13.png" alt><br>show log查看历史版本<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN14.png" alt></p><h4 id="2-2-4-导入与导出"><a href="#2-2-4-导入与导出" class="headerlink" title="2.2.4 导入与导出"></a>2.2.4 导入与导出</h4><p>Import将本地资源导入到svn服务器<br>Export导出项目，和checkout的区别,它不存在.svn隐藏文件<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN16.png" alt></p><h4 id="2-2-5-冲突问题"><a href="#2-2-5-冲突问题" class="headerlink" title="2.2.5 冲突问题"></a>2.2.5 冲突问题</h4><p>遇到冲突 Edit confilcts解决冲突<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN20.png" alt></p><h2 id="3-IDEA中使用TortoiseSVN"><a href="#3-IDEA中使用TortoiseSVN" class="headerlink" title="3.IDEA中使用TortoiseSVN"></a>3.IDEA中使用TortoiseSVN</h2><h3 id="3-1-setting中配置svn"><a href="#3-1-setting中配置svn" class="headerlink" title="3.1 setting中配置svn"></a>3.1 setting中配置svn</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN21.png" alt></p><h3 id="3-2-svn在idea中的基本操作"><a href="#3-2-svn在idea中的基本操作" class="headerlink" title="3.2 svn在idea中的基本操作"></a>3.2 svn在idea中的基本操作</h3><h4 id="3-2-1-将项目checkout"><a href="#3-2-1-将项目checkout" class="headerlink" title="3.2.1 将项目checkout"></a>3.2.1 将项目checkout</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN22.png" alt></p><h4 id="3-2-2-按钮作用-update-commit-历史-返回版本"><a href="#3-2-2-按钮作用-update-commit-历史-返回版本" class="headerlink" title="3.2.2 按钮作用 update commit 历史 返回版本"></a>3.2.2 按钮作用 update commit 历史 返回版本</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN23.png" alt>    </p><h4 id="3-2-3-将项目提交到SVN"><a href="#3-2-3-将项目提交到SVN" class="headerlink" title="3.2.3 将项目提交到SVN"></a>3.2.3 将项目提交到SVN</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN24.png" alt></p><h4 id="3-2-4-忽略设置"><a href="#3-2-4-忽略设置" class="headerlink" title="3.2.4 忽略设置"></a>3.2.4 忽略设置</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN30.png" alt>    </p><h4 id="3-2-5-冲突解决"><a href="#3-2-5-冲突解决" class="headerlink" title="3.2.5 冲突解决"></a>3.2.5 冲突解决</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN31.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN32.png" alt></p><h3 id="3-3-项目模版"><a href="#3-3-项目模版" class="headerlink" title="3.3 项目模版"></a>3.3 项目模版</h3><h4 id="3-3-1-建立模版项目"><a href="#3-3-1-建立模版项目" class="headerlink" title="3.3.1 建立模版项目"></a>3.3.1 建立模版项目</h4><p>branches：分支项目<br>tags：分支版本（一般设为只读）<br>trunk：项目主干<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN34.png" alt>      </p><h4 id="3-3-2-创建分支"><a href="#3-3-2-创建分支" class="headerlink" title="3.3.2 创建分支"></a>3.3.2 创建分支</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN35.png" alt></p><h4 id="3-3-3-主干分支合并"><a href="#3-3-3-主干分支合并" class="headerlink" title="3.3.3 主干分支合并"></a>3.3.3 主干分支合并</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/SVN37.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 版本控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制系统 </tag>
            
            <tag> 自由 </tag>
            
            <tag> 开源 </tag>
            
            <tag> 项目管理 </tag>
            
            <tag> 多人开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git搭建与基本操作</title>
      <link href="/2019/06/07/git-da-jian-yu-ji-ben-cao-zuo/"/>
      <url>/2019/06/07/git-da-jian-yu-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="Git理论"><a href="#Git理论" class="headerlink" title="Git理论"></a>Git理论</h2><h3 id="1-1git的概述"><a href="#1-1git的概述" class="headerlink" title="1,1git的概述"></a>1,1git的概述</h3><p>git是一个开源的分布式版本控制系统，可以借助github托管项目代码，进行团队开发。</p><h3 id="1-2git网址"><a href="#1-2git网址" class="headerlink" title="1.2git网址"></a>1.2git网址</h3><p>国内码云<br>国外github</p><h3 id="1-3-Git原理图"><a href="#1-3-Git原理图" class="headerlink" title="1.3 Git原理图"></a>1.3 Git原理图</h3><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git18.png" alt></p><h2 id="Git实战"><a href="#Git实战" class="headerlink" title="Git实战"></a>Git实战</h2><p>使用前要安装git，并配置环境变量。</p><h3 id="2-1工作时开发的注意事项"><a href="#2-1工作时开发的注意事项" class="headerlink" title="2.1工作时开发的注意事项"></a>2.1工作时开发的注意事项</h3><p>1.代码需要备份各个版本都要备份【1.0版本出现问题，不能在2.0版本上修复】<br>2.上班下载代码，下班上传代码。<br>3.解决工作中团队开发的代码冲突问题。</p><h3 id="2-2在idea中使用Git"><a href="#2-2在idea中使用Git" class="headerlink" title="2.2在idea中使用Git"></a>2.2在idea中使用Git</h3><h4 id="2-2-1配置git"><a href="#2-2-1配置git" class="headerlink" title="2.2.1配置git"></a>2.2.1配置git</h4><p><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git01.png" alt></p><h4 id="2-2-2搭建项目"><a href="#2-2-2搭建项目" class="headerlink" title="2.2.2搭建项目"></a>2.2.2搭建项目</h4><p>1.在码云上创建仓库<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git02.png" alt><br>2.idea中新建项目，项目名要和码云上的一致。<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git03.png" alt><br>3.将本地项目上传到码云上<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git04.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git05.png" alt><br>4.将本地项目删除通过码云上的ssh克隆一个项目到本地<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git06.png" alt></p><h4 id="2-2-3项目上传"><a href="#2-2-3项目上传" class="headerlink" title="2.2.3项目上传"></a>2.2.3项目上传</h4><p>1.修改项目里的内容通过commit上传到本地的master<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git07.png" alt><br>CommitMessage里面写修改的内容<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git08.png" alt></p><hr><p>2.通过Push上传的git仓库<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git09.png" alt><br>添加成功<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git10.png" alt></p><h4 id="2-2-4版本操作管理"><a href="#2-2-4版本操作管理" class="headerlink" title="2.2.4版本操作管理"></a>2.2.4版本操作管理</h4><p>1.通过Branchers新建个版本分支<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git11.png" alt></p><ol start="2"><li>1.0为新建的版本分支 master为主分支 check out是切换到该版本<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git12.png" alt></li><li>登入码云看到分支添加成功<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git13.png" alt></li><li>合并版本使用Merage<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git14.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git15.png" alt></li></ol><h4 id="2-2-5历史记录"><a href="#2-2-5历史记录" class="headerlink" title="2.2.5历史记录"></a>2.2.5历史记录</h4><p>1.使用Compare with 进行版本间的比较<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git16.png" alt></p><p>2.历史记录按钮可看到项目或文件的历史修改信息<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git19.png" alt><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/git17.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 版本控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 多人开发 </tag>
            
            <tag> 分布式版本控制系统 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建HEXO</title>
      <link href="/2019/06/05/da-jian-hexo/"/>
      <url>/2019/06/05/da-jian-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="认识-Hexo"><a href="#认识-Hexo" class="headerlink" title="认识 Hexo"></a>认识 Hexo</h2><p>hexo是一个快速，简洁高效的博客框架。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.node：用来生成静态页面的 到Node.js官网下载相应平台的最新版本。<br>2.git: 把本地的hexo内容提交到github上去。<br>3.github：用来做博客的远程创库、域名、服务器。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p><blockquote><p>$ sudo npm install -g hexo</p></blockquote><p>输入管理员密码即开始安装</p><blockquote><p>Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。<br>初始化</p></blockquote><p>终端cd到一个你选定的目录（比如创建一个blog文件，$cd blog），执行hexo init命令：</p><blockquote><p>$ hexo init</p></blockquote><p>在blog目录下，执行如下命令，安装npm：</p><blockquote><p>$ npm install</p></blockquote><p>执行如下命令，开启hexo服务器：</p><blockquote><p>$ hexo s</p></blockquote><p>此时，浏览器中打开网址<a href="http://localhost:4000，能看到如下页面：" target="_blank" rel="noopener">http://localhost:4000，能看到如下页面：</a><br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo01.png" alt="hexo01"></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录Github账号，新建仓库，名为用户名.github.io固定写法。<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo02.png" alt="hexo02"></p><p>找到blog文件夹下的_config.yml文件找到最后一行修改为（更多yml部署查阅Hexo文档） </p><blockquote><p>deploy:<br>    type: git<br>    repository: <a href="https://github.com/edderqin/edderqin.github.io.git" target="_blank" rel="noopener">https://github.com/edderqin/edderqin.github.io.git</a><br>    branch: master</p></blockquote><p>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记</p><p>在blog文件夹目录下执行生成静态页面命令：</p><blockquote><p>$ hexo generate        或者：hexo g</p></blockquote><p>再执行配置命令：</p><blockquote><p>$ hexo deploy            或者：hexo d</p></blockquote><p>注意：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：<br>$ npm install hexo-deployer-git –save<br>若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码<br>hexo deploy命令执行成功后，浏览器中打开网址<a href="http://edderqin.github.io（将edderqin换成你的用户名）能看到和打开http://localhost:4000时一样的页面。" target="_blank" rel="noopener">http://edderqin.github.io（将edderqin换成你的用户名）能看到和打开http://localhost:4000时一样的页面。</a>　</p><h2 id="添加ssh-key到Github"><a href="#添加ssh-key到Github" class="headerlink" title="添加ssh key到Github"></a>添加ssh key到Github</h2><p>1.1检查SSH keys是否存在Github<br>执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p><blockquote><p>$ ls -al ~/.ssh</p></blockquote><p>1.2.生成新的ssh key<br>执行如下命令生成public/private rsa key pair，注意将<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>换成你自己注册Github的邮箱地址。</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“默认会在相应路径下C盘用户目录下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件</p></blockquote><p>1.3.将ssh key添加到Github中<br>Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。<br>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:<br>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo03.png" alt="hexo03"></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>终端cd到blog文件夹下，执行如下命令新建文章：</p><blockquote><p>hexo new “postName”</p></blockquote><p>名为postName.md的文件会建在目录/blog/source/_posts下。<br>文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布: </p><blockquote><p>hexo g             //生成静态页面<br>hexo d            //将文章部署到Github</p></blockquote><h2 id="安装theme"><a href="#安装theme" class="headerlink" title="安装theme"></a>安装theme</h2><p>你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例<br>终端cd到 blog 目录下执行如下命令：</p><blockquote><p>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p></blockquote><p>将blog目录下_config.yml里theme的名称landscape修改为next<br>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p><blockquote><p>$ hexo clean           //清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>$ hexo g             //生成缓存和静态文件<br>$ hexo d             //重新部署到服务器</p></blockquote><p>至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可，不要忘记冒号:后加空格。NexT 使用文档里有极详细的介绍。</p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>首先要有一个域名我的域名是在阿里云买的<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo04.png" alt="hexo04"></p><p>审核通过后进行解析<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo06.png" alt="hexo06"><br>添加三条解析 后两条固定为，192.30.252.153和192.30.252.154这两个IP地址为github的服务器地址 CNAME记录值填你的github博客网址<br>这些全部设置完成后，此时你并不能要申请的域名访问你的博客。接着你需要做的是在hexo根目录的source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息 如 edderblog.top<br><img src="https://raw.githubusercontent.com/edderqin/picflod/master/img/hexo07.png" alt="hexo07"><br>接下来输入域名即可访问项目</p><p>参考资料:<br><a href="https://www.cnblogs.com/penglei-it/p/hexo_domain_name.html" target="_blank" rel="noopener">https://www.cnblogs.com/penglei-it/p/hexo_domain_name.html</a> hexo域名配置<br><a href="https://www.cnblogs.com/MuYunyun/p/5927491.html" target="_blank" rel="noopener">https://www.cnblogs.com/MuYunyun/p/5927491.html</a> 建站参考<br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a> 建站详细资料<br><a href="https://easyhexo.com/https://easyhexo.com/" target="_blank" rel="noopener">https://easyhexo.com/https://easyhexo.com/</a> eazy hexo</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/04/hello-world/"/>
      <url>/2019/06/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
